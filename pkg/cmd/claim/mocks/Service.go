// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddClaim provides a mock function with given fields: user, provider, claims
func (_m *Service) AddClaim(user string, provider string, claims []string) (string, error) {
	ret := _m.Called(user, provider, claims)

	if len(ret) == 0 {
		panic("no return value specified for AddClaim")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) (string, error)); ok {
		return rf(user, provider, claims)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) string); ok {
		r0 = rf(user, provider, claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(user, provider, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUser provides a mock function with given fields: user, provider
func (_m *Service) AddUser(user string, provider string) (string, error) {
	ret := _m.Called(user, provider)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(user, provider)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(user, provider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClaim provides a mock function with given fields: user, provider
func (_m *Service) GetClaim(user string, provider string) (string, error) {
	ret := _m.Called(user, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetClaim")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(user, provider)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(user, provider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveClaim provides a mock function with given fields: user, provider, claims
func (_m *Service) RemoveClaim(user string, provider string, claims []string) (string, error) {
	ret := _m.Called(user, provider, claims)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClaim")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) (string, error)); ok {
		return rf(user, provider, claims)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) string); ok {
		r0 = rf(user, provider, claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(user, provider, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: user, provider
func (_m *Service) RemoveUser(user string, provider string) (string, error) {
	ret := _m.Called(user, provider)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(user, provider)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(user, provider)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(user, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
