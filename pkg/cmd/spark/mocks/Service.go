// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	spark "github.com/SneaksAndData/esd-services-api-client-go/spark"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetConfiguration provides a mock function with given fields: name
func (_m *Service) GetConfiguration(name string) (spark.SubmissionConfiguration, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 spark.SubmissionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (spark.SubmissionConfiguration, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) spark.SubmissionConfiguration); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(spark.SubmissionConfiguration)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLifecycleStage provides a mock function with given fields: id
func (_m *Service) GetLifecycleStage(id string) (interface{}, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLifecycleStage")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: id
func (_m *Service) GetLogs(id string) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuntimeInfo provides a mock function with given fields: id
func (_m *Service) GetRuntimeInfo(id string) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRuntimeInfo")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunJob provides a mock function with given fields: request, sparkJobName
func (_m *Service) RunJob(request spark.JobParams, sparkJobName string) (string, error) {
	ret := _m.Called(request, sparkJobName)

	if len(ret) == 0 {
		panic("no return value specified for RunJob")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(spark.JobParams, string) (string, error)); ok {
		return rf(request, sparkJobName)
	}
	if rf, ok := ret.Get(0).(func(spark.JobParams, string) string); ok {
		r0 = rf(request, sparkJobName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(spark.JobParams, string) error); ok {
		r1 = rf(request, sparkJobName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
